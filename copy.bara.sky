"""Maintaining files from external source.
"""

core.workflow(
    name = "gtl_tensorflow",
    origin = git.origin(
        url = "https://github.com/tensorflow/tensorflow.git",
        ref = "v2.2.0",
    ),
    destination = folder.destination(),
    origin_files = glob(
        [
            "tensorflow/core/lib/gtl/iterator_range.h",
            "tensorflow/core/lib/gtl/iterator_range_test.cc",
            "tensorflow/core/lib/gtl/subtle/map_traits.h",
            "tensorflow/core/lib/gtl/map_util.h",
            "tensorflow/core/lib/gtl/map_util_test.cc",
            "tensorflow/core/lib/gtl/priority_queue_util.h",
            "tensorflow/core/lib/gtl/top_n.h",
            "tensorflow/core/lib/gtl/top_n_test.cc",
            "tensorflow/core/platform/file_statistics.h",
            "tensorflow/core/platform/file_system.h",
            "tensorflow/core/platform/file_system.cc",
            "tensorflow/core/platform/file_system_helper.h",
            "tensorflow/core/platform/file_system_helper.cc",
            "tensorflow/core/platform/file_system_test.cc",
            "tensorflow/core/platform/null_file_system.h",
            "tensorflow/core/platform/default/posix_file_system.h",
            "tensorflow/core/platform/default/posix_file_system.cc",
            "tensorflow/core/platform/scanner.h",
            "tensorflow/core/platform/scanner.cc",
            "tensorflow/core/platform/scanner_test.cc",
            "tensorflow/core/platform/path.h",
            "tensorflow/core/platform/path.cc",
            "tensorflow/core/lib/io/path_test.cc",
        ],
    ),
    destination_files = glob(
        [
            "gtl/iterator_range.h",
            "gtl/iterator_range_test.cc",
            "gtl/map_traits.h",
            "gtl/map_util.h",
            "gtl/map_util_test.cc",
            "gtl/priority_queue_util.h",
            "gtl/top_n.h",
            "gtl/top_n_test.cc",
            "gtl/file_statistics.h",
            "gtl/file_system.h",
            "gtl/file_system.cc",
            "gtl/file_system_helper.h",
            "gtl/file_system_helper.cc",
            "gtl/file_system_test.cc",
            "gtl/null_file_system.h",
            "gtl/posix_file_system.h",
            "gtl/posix_file_system.cc",
            "gtl/scanner.h",
            "gtl/scanner.cc",
            "gtl/scanner_test.cc",
            "gtl/path.h",
            "gtl/path.cc",
            "gtl/path_test.cc",
        ],
        exclude = [
            "**/BUILD.bazel",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ds@bytedance.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("tensorflow/core/lib/gtl/subtle/map_traits.h", "gtl/map_traits.h"),
        core.move("tensorflow/core/lib/io/path_test.cc", "gtl/path_test.cc"),
        core.move("tensorflow/core/lib/gtl", "gtl"),
        core.move("tensorflow/core/platform/default", "gtl"),
        core.move("tensorflow/core/platform", "gtl"),
        core.replace(
            before = "#include \"tensorflow/core/lib/gtl/subtle/map_traits.h\"",
            after = "#include \"gtl/map_traits.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/logging.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/lib/gtl/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/test.h\"",
            after = "#include \"gtest/gtest.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"tensorflow/core/platform/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "StringPiece",
            after = "absl::string_view",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "namespace tensorflow {",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "}  // namespace tensorflow",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "namespace subtle {",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "}  // namespace subtle",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "subtle::",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_LIB_GTL_SUBTLE_MAP_TRAITS_H_",
            after = "GTL_MAP_TRAITS_H_",
            paths = glob(["gtl/map_traits.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_LIB_GTL_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_LIB_GTL_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_PLATFORM_POSIX_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "TENSORFLOW_CORE_PLATFORM_",
            after = "GTL_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = "PLATFORM_WINDOWS",
            after = "OS_WIN",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "PLATFORM_POSIX",
            after = "OS_POSIX",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        patch.apply(patches = [
            "gtl/patches/tensorflow/file_system.patch",
            "gtl/patches/tensorflow/iterator_range.patch",
            "gtl/patches/tensorflow/map_util.patch",
            "gtl/patches/tensorflow/path.patch",
            "gtl/patches/tensorflow/scanner.patch",
            "gtl/patches/tensorflow/top_n.patch",
        ]),
    ],
)

core.workflow(
    name = "gtl_chromium",
    # origin = git.origin(
    #     url = "https://github.com/chromium/chromium.git",
    #     ref = "2dcb87aab462363932219cc2e9c6d11dcd2c8452",  # 2020-07-02
    # ),
    origin = folder.origin(),
    destination = folder.destination(),
    origin_files = glob(
        [
            "base/atomic_sequence_num.h",
            "base/auto_reset.h",
            "base/auto_reset_unittest.cc",
            "base/bits.h",
            "base/bits_unittest.cc",
            "base/compiler_specific.h",
            "base/guid.h",
            "base/guid.cc",
            "base/guid_unittest.cc",
            "base/macros.h",
            "base/sequence_checker.h",
            "base/sequence_checker_impl.h",
            "base/sequence_checker_impl.cc",
            "base/sequence_checker_unittest.cc",
            "base/sequence_token.h",
            "base/sequence_token.cc",
            "base/sequence_token_unittest.cc",
            "base/thread_annotations.h",
            "base/thread_annotations_unittest.cc",
            "base/containers/ring_buffer.h",
        ],
    ),
    destination_files = glob(
        [
            "gtl/atomic_sequence_num.h",
            "gtl/auto_reset.h",
            "gtl/auto_reset_unittest.cc",
            "gtl/bits.h",
            "gtl/bits_unittest.cc",
            "gtl/compiler_specific.h",
            "gtl/guid.h",
            "gtl/guid.cc",
            "gtl/guid_unittest.cc",
            "gtl/macros.h",
            "gtl/sequence_checker.h",
            "gtl/sequence_checker_impl.h",
            "gtl/sequence_checker_impl.cc",
            "gtl/sequence_checker_unittest.cc",
            "gtl/sequence_token.h",
            "gtl/sequence_token.cc",
            "gtl/sequence_token_unittest.cc",
            "gtl/thread_annotations.h",
            "gtl/thread_annotations_unittest.cc",
            "gtl/container/ring_buffer.h",
        ],
        exclude = [
            "**/BUILD.bazel",
        ],
    ),
    authoring = authoring.overwrite("Shuai Zhang <zhangshuai.ds@bytedance.com>"),
    mode = "SQUASH",
    transformations = [
        core.move("base/containers", "gtl/container"),
        core.move("base", "gtl"),
        core.replace(
            before = "#include \"base/base_export.h\"",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "BASE_EXPORT ",
            after = "",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"base/macros.h\"",
            after = "#include \"gtl/macros.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"base/strings/string_piece.h\"",
            after = "#include \"absl/strings/string_view.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "char16",
            after = "char16_t",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "base::StringPiece16",
            after = "std::string_view<char16_t>",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "base::StringPiece",
            after = "absl::string_view",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"build/build_config.h\"",
            after = "#include \"config/config.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"base/check_op.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"base/check.h\"",
            after = "#include \"glog/logging.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"testing/gtest/include/gtest/gtest.h\"",
            after = "#include \"gtest/gtest.h\"",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "#include \"base/${filename}.h\"",
            after = "#include \"gtl/${filename}.h\"",
            regex_groups = {"filename": "[^\\.>\"]*"},
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = " GUARDED_BY_CONTEXT",
            after = " GTL_GUARDED_BY_CONTEXT",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = " VALID_CONTEXT_REQUIRED",
            after = " GTL_VALID_CONTEXT_REQUIRED",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = " GUARDED_BY",
            after = " ABSL_GUARDED_BY",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = " EXCLUSIVE_LOCKS_REQUIRED",
            after = " ABSL_EXCLUSIVE_LOCKS_REQUIRED",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "namespace base {",
            after = "namespace gtl {",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "}  // namespace base",
            after = "}  // namespace gtl",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = "base::",
            after = "gtl::",
            paths = glob(["**/*.h", "**/*.cc"]),
        ),
        core.replace(
            before = " BASE_CONTAINERS_",
            after = " GTL_CONTAINER_",
            paths = glob(["**/*.h"]),
        ),
        core.replace(
            before = " BASE_",
            after = " GTL_",
            paths = glob(["**/*.h"]),
        ),
        patch.apply(patches = [
            "gtl/patches/chromium/guid.patch",
            "gtl/patches/chromium/sequence_token.patch",
            "gtl/patches/chromium/thread_annotations.patch",
        ]),
    ],
)
